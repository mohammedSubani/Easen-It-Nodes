{
  "Uuid": "6e276a18-6980-49c0-8872-cb2108240b02",
  "IsCustomNode": true,
  "Category": "Easen It Nodes",
  "Description": "Creates a Menger Spong fractal structure",
  "Name": "Fractals.mengerSponge",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ncl= IN[0]\r\nvolStop=IN[1]\r\nforceComputation=IN[2]\r\n\r\n# Creates the first cube length.\r\ncs=Cuboid.ByLengths(cl,cl,cl)\r\n# The output to this node will be stored as a list in this list.\r\nresult=[]\r\n# A recursive method that will be used to define the mengerSponge geometry .\r\ndef mengerIteration(cubeSolid):\r\n\t# Find the given cube length.\r\n\tedges=Solid.Edges.GetValue(cubeSolid)\r\n\tedgeCurve=Edge.CurveGeometry.GetValue(edges[0])\r\n\tcubeLength=Curve.Length.GetValue(edgeCurve)\r\n\r\n###############################################################\r\n\t# The sub-cubes to be removed to form an iteration of mengerSponge.\r\n\tpopElements=(4,10,12,13,14,16,22)\r\n###############################################################\r\n\t# Find the cube faces.\r\n\tcubeFaces=Topology.Faces.GetValue(cubeSolid)\r\n\tcubeSurfces=[]\r\n\tfor i in cubeFaces: \r\n\t\tcubeSurfces.append(Face.SurfaceGeometry(i))\r\n###############################################################\r\n\t# Create first split patch by starting with the top surface.\r\n\ttopSurface=cubeSurfces[0]\r\n\t# Create cutting planes.\r\n\tcuttingPlaneOrigin_firstCut=Surface.PointAtParameter(topSurface,1.0/3.0,0)\r\n\tplaneNormalVector_firstCut=Surface.TangentAtUParameter(topSurface,1.0/3.0,0)\r\n\tcuttingPlane_firstCut=Plane.ByOriginNormal(cuttingPlaneOrigin_firstCut,planeNormalVector_firstCut)\r\n\t# Split the cubes.\r\n\tfirstSplit=Geometry.Split(cubeSolid,cuttingPlane_firstCut)\r\n\t# The first cut patch.\r\n\tfirstPatch=[]\r\n\r\n\tfirstPatch.append(firstSplit[1])\r\n\tfirstPatch.append(Geometry.Translate(firstSplit[1],planeNormalVector_firstCut,(1.0/3.0)*cubeLength))\r\n\tfirstPatch.append(Geometry.Translate(firstSplit[1],planeNormalVector_firstCut,(1.0/3.0)*cubeLength*2))\r\n###############################################################\r\n\t# Create second split patch by starting with the side surface.\t\r\n\tsideSurface=cubeSurfces[2]\r\n\t# Create cutting planes.\r\n\tcuttingPlaneOrigin_secondCut=Surface.PointAtParameter(sideSurface,1.0/3.0,0)\r\n\tplaneNormalVector_secondCut=Surface.TangentAtUParameter(sideSurface,1.0/3.0,0)\r\n\tcuttingPlane_secondCut=Plane.ByOriginNormal(cuttingPlaneOrigin_secondCut,planeNormalVector_secondCut)\r\n\t# Split the first patch.\r\n\tsecondPatch=[]\r\n\r\n\tfor i in firstPatch:\r\n\t\tsplit=Geometry.Split(i,cuttingPlane_secondCut)\r\n\t\tsecondPatch.append(split[1])\r\n\t\tsecondPatch.append(Geometry.Translate(split[1],planeNormalVector_secondCut,(1.0/3.0)*cubeLength))\r\n\t\tsecondPatch.append(Geometry.Translate(split[1],planeNormalVector_secondCut,(1.0/3.0)*cubeLength*2))\r\n###############################################################\r\n\t# Create the last split patch by starting with the adjacent side surface.\t\r\n\tthirdSurface=cubeSurfces[3]\r\n\t# Create cutting planes.\r\n\tcuttingPlaneOrigin_thirdCut=Surface.PointAtParameter(thirdSurface,0,1.0/3.0)\r\n\tplaneNormalVector_thirdCut=Surface.TangentAtVParameter(thirdSurface,0,1.0/3.0)\r\n\tcuttingPlane_thirdCut=Plane.ByOriginNormal(cuttingPlaneOrigin_thirdCut,planeNormalVector_thirdCut)\r\n\t# Split the second patch.\r\n\tlastPatch=[]\r\n\t\r\n\tfor i in secondPatch:\r\n\t\tsplit=Geometry.Split(i,cuttingPlane_thirdCut)\r\n\t\tlastPatch.append(split[1])\r\n\t\tlastPatch.append(Geometry.Translate(split[1],planeNormalVector_thirdCut,(1.0/3.0)*cubeLength))\r\n\t\tlastPatch.append(Geometry.Translate(split[1],planeNormalVector_thirdCut,(1.0/3.0)*cubeLength*2))\r\n\r\n###############################################################\r\n\t# mengerIteration cubes add everything but the popElements.\r\n\tmengerIterationCubes=[]\r\n\t\r\n\tfor i in range(len(lastPatch)):\r\n\t\tif popElements.Contains(i):\r\n\t\t\tpass\r\n\t\telse:\r\n\t\t\tmengerIterationCubes.append(lastPatch[i])\r\n###############################################################\r\n\t# Base Case.\t\t\t\r\n\tif Solid.Volume.GetValue(mengerIterationCubes[0])<=volStop:\r\n\t\tresult.append(mengerIterationCubes)\r\n\telse:\r\n\t\tfor i in mengerIterationCubes:\r\n\t\t\tmengerIteration(i)\r\n\t\t\t\r\n######################################################################################################################################################################\r\n# Calling the method.\t\r\nif float(cl)/volStop > 0.2923976608187 and forceComputation == False:\r\n\tresult.append('High computation cost try to make cubeLength to stopVolume ratio less than 0.29239')\r\nelse:\r\n\tmengerIteration(cs)\r\n######################################################################################################################################################################\r\nOUT = result\r\n\r\n\r\n\r\n#______________________________________________________________________________________________________________________________________________________#\r\n#______________________________________________________________________________________________________________________________________________________#\r\n                                                                                                                                              \r\n#     88888888888                                                      88               888b      88                        88                         #\r\n#     88                                                               88    ,d         8888b     88                        88                         #\r\n#     88                                                               88    88         88 `8b    88                        88                         #\r\n#     88aaaaa      ,adPPYYba,  ,adPPYba,   ,adPPYba,  8b,dPPYba,       88  MM88MMM      88  `8b   88   ,adPPYba,    ,adPPYb,88   ,adPPYba,  ,adPPYba,  #\r\n#     88\"\"\"\"\"      \"\"     `Y8  I8[    \"\"  a8P_____88  88P'   `\"8a      88    88         88   `8b  88  a8\"     \"8a  a8\"    `Y88  a8P_____88  I8[    \"\"  #\r\n#     88           ,adPPPPP88   `\"Y8ba,   8PP\"\"\"\"\"\"\"  88       88      88    88         88    `8b 88  8b       d8  8b       88  8PP\"\"\"\"\"\"\"   `\"Y8ba,   #\r\n#     88           88,    ,88  aa    ]8I  \"8b,   ,aa  88       88      88    88,        88     `8888  \"8a,   ,a8\"  \"8a,   ,d88  \"8b,   ,aa  aa    ]8I  #\r\n#     88888888888  `\"8bbdP\"Y8  `\"YbbdP\"'   `\"Ybbd8\"'  88       88      88    \"Y888      88      `888   `\"YbbdP\"'    `\"8bbdP\"Y8   `\"Ybbd8\"'  `\"YbbdP\"'  #\r\n#______________________________________________________________________________________________________________________________________________________#                                                                                                                                                 \r\n#______________________________________________________________________________________________________________________________________________________#                              ",
      "VariableInputPorts": true,
      "Id": "dd78f2d7acb944fca1bf0db56b242574",
      "Inputs": [
        {
          "Id": "39756f39848d4d38a1bf4aaa1efe5229",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7017c41ff1514a0c9f83ba59e1c905d6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a75fce6eea84764a61872c1786a35cc",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "67f7f0a843644b209523a4a2e984d5c3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "mengerSponge",
      "Id": "a6af843df2854cf69dc25d43178e40eb",
      "Inputs": [
        {
          "Id": "44259c73d051457ba115addbafc5e956",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "forceComputation",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "e80c9e7c910b4048a9479c7ef73d67a0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fe62600bf213433a814f7366ddebb90e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "stopVolume",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "53a02e7fe43c48c98149b70ec010d217",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4a59cb028cef440ab373096f8d48e778",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "cubeLength",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "c8a3a2b82f2e4381af8c1ce84c48e3f5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "72e5b515815b4f8f8dfa0ad6934fac3c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "67f7f0a843644b209523a4a2e984d5c3",
      "End": "44259c73d051457ba115addbafc5e956",
      "Id": "ac66b9eed9d64756807b71d20f05a157"
    },
    {
      "Start": "fe62600bf213433a814f7366ddebb90e",
      "End": "2a75fce6eea84764a61872c1786a35cc",
      "Id": "cbe6e8eac5c14803852b3398cc1ad736"
    },
    {
      "Start": "4a59cb028cef440ab373096f8d48e778",
      "End": "7017c41ff1514a0c9f83ba59e1c905d6",
      "Id": "9f8c55c5b39741ed8119f5d484658e7f"
    },
    {
      "Start": "72e5b515815b4f8f8dfa0ad6934fac3c",
      "End": "39756f39848d4d38a1bf4aaa1efe5229",
      "Id": "d1d9d710b036458e8c8fde83a587b6f0"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.3.8810",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 57.252003910792673,
      "EyeY": 37.8608697277283,
      "EyeZ": -130.48948311807015,
      "LookX": -57.252003910792673,
      "LookY": -37.8608697277283,
      "LookZ": 130.48948311807015,
      "UpX": -0.017525304766779284,
      "UpY": 0.99904822158195028,
      "UpZ": 0.0399438937380685
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "dd78f2d7acb944fca1bf0db56b242574",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 907.540374571504,
        "Y": 348.330031554864
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "a6af843df2854cf69dc25d43178e40eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1042.0,
        "Y": 344.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "e80c9e7c910b4048a9479c7ef73d67a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 552.0,
        "Y": 424.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "53a02e7fe43c48c98149b70ec010d217",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 552.0,
        "Y": 366.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "c8a3a2b82f2e4381af8c1ce84c48e3f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 552.0,
        "Y": 308.0
      }
    ],
    "Annotations": [],
    "X": -137.65580462637774,
    "Y": -9.1182460834139647,
    "Zoom": 0.8033215934625979
  }
}